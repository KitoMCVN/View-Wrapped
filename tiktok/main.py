import json
import pandas as pd
from datetime import datetime
import os
import zipfile
import fnmatch
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
import glob

PROFILE_BASE_PATH = ["Profile", "Profile Info", "ProfileMap"]
USER_NAME_PATH = PROFILE_BASE_PATH + ["userName"]
EMAIL_PATH = PROFILE_BASE_PATH + ["emailAddress"]
PHONE_PATH = PROFILE_BASE_PATH + ["telephoneNumber"]
BIO_DESC_PATH = PROFILE_BASE_PATH + ["bioDescription"]
BIRTH_DATE_PATH = PROFILE_BASE_PATH + ["birthDate"]
LIKES_RECEIVED_PATH = PROFILE_BASE_PATH + ["likesReceived"]

APP_SETTINGS_BASE_PATH = ["App Settings", "Settings", "SettingsMap"]
APP_LANG_PATH = APP_SETTINGS_BASE_PATH + ["App Language"]
PRIVATE_ACCOUNT_PATH = APP_SETTINGS_BASE_PATH + ["Private Account"]
PERSONALIZED_ADS_PATH = APP_SETTINGS_BASE_PATH + ["PersonalizedAds"]
FYP_KEYWORD_FILTERS_PATH = APP_SETTINGS_BASE_PATH + ["Content Preferences", "Keyword filters for videos in For You feed"]

WATCH_HISTORY_PATH = ["Your Activity", "Watch History", "VideoList"]
LIKE_LIST_PATH = ["Your Activity", "Like List", "ItemFavoriteList"]
COMMENT_LIST_PATH = ["Comment", "Comments", "CommentsList"]
SEARCH_LIST_PATH = ["Your Activity", "Searches", "SearchList"]
SHARE_HISTORY_PATH = ["Your Activity", "Share History", "ShareHistoryList"]
LOGIN_HISTORY_PATH = ["Your Activity", "Login History", "LoginHistoryList"]
FOLLOWER_LIST_PATH = ["Your Activity", "Follower", "FansList"]
FOLLOWING_LIST_PATH = ["Your Activity", "Following", "Following"]
FAVORITE_VIDEOS_PATH = ["Your Activity", "Favorite Videos", "FavoriteVideoList"]
FAVORITE_SOUNDS_PATH = ["Your Activity", "Favorite Sounds", "FavoriteSoundList"]
BLOCKED_USERS_PATH = ["App Settings", "Block List", "BlockList"]

ORDER_HISTORY_PATH = ["TikTok Shop", "Order History", "OrderHistories"]
PRODUCT_BROWSING_PATH = ["TikTok Shop", "Product Browsing History", "ProductBrowsingHistories"]
SHOPPING_CART_PATH = ["TikTok Shop", "Shopping Cart List", "ShoppingCart"]
SAVED_ADDRESSES_PATH = ["TikTok Shop", "Saved Address Information", "SavedAddress"]
SAVED_PAYMENT_CARDS_PATH = ["TikTok Shop", "Current Payment Information", "PayCard"]

WATCH_LIVE_HISTORY_PATH = ["Tiktok Live", "Watch Live History", "WatchLiveMap"]

OFF_TIKTOK_ACTIVITY_PATH = ["Ads and data", "Off TikTok Activity", "OffTikTokActivityDataList"]

DM_CHAT_HISTORY_PATH = ["Direct Message", "Direct Messages", "ChatHistory"]

ZIP_FILE_PATTERN = "./data/TikTok_Data_*.zip"

console = Console()

def safe_get_data(data_dict, path_list, default=None):
    """
    Truy c·∫≠p v√† l·∫•y d·ªØ li·ªáu t·ª´ m·ªôt t·ª´ ƒëi·ªÉn (dictionary) l·ªìng nhau m·ªôt c√°ch an to√†n.

    H√†m n√†y duy·ªát qua m·ªôt t·ª´ ƒëi·ªÉn theo m·ªôt danh s√°ch c√°c kh√≥a (keys) ƒë∆∞·ª£c cung c·∫•p.
    N·∫øu b·∫•t k·ª≥ kh√≥a n√†o trong ƒë∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i, h√†m s·∫Ω tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
    thay v√¨ g√¢y ra l·ªói `KeyError`.

    Args:
        data_dict (dict): T·ª´ ƒëi·ªÉn ngu·ªìn ch·ª©a d·ªØ li·ªáu.
        path_list (list): Danh s√°ch c√°c kh√≥a (string) ƒë·ªÉ ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫øn
                          d·ªØ li·ªáu c·∫ßn l·∫•y.
        default (any, optional): Gi√° tr·ªã s·∫Ω ƒë∆∞·ª£c tr·∫£ v·ªÅ n·∫øu ƒë∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá
                                 ho·∫∑c gi√° tr·ªã cu·ªëi c√πng l√† None. M·∫∑c ƒë·ªãnh l√† None.

    Returns:
        any: Gi√° tr·ªã ƒë∆∞·ª£c t√¨m th·∫•y t·∫°i ƒë∆∞·ªùng d·∫´n ch·ªâ ƒë·ªãnh, ho·∫∑c gi√° tr·ªã `default`
             n·∫øu kh√¥ng t√¨m th·∫•y.
    """
    temp_dict = data_dict
    for key in path_list:
        if isinstance(temp_dict, dict) and key in temp_dict:
            temp_dict = temp_dict[key]
        else:
            return default
    return temp_dict if temp_dict is not None else default

def load_tiktok_data_from_zip(zip_file_path, internal_file_pattern="user_data*.json"):
    """
    T·∫£i v√† ph√¢n t√≠ch c√∫ ph√°p (parse) t·ªáp JSON d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ t·ªáp ZIP c·ªßa TikTok.

    H√†m n√†y m·ªü m·ªôt t·ªáp ZIP, t√¨m ki·∫øm t·ªáp JSON d·ªØ li·ªáu ng∆∞·ªùi d√πng (v√≠ d·ª•: user_data.json)
    b√™n trong, ƒë·ªçc n·ªôi dung v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh m·ªôt ƒë·ªëi t∆∞·ª£ng t·ª´ ƒëi·ªÉn Python.
    N√≥ c≈©ng x·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn nh∆∞ kh√¥ng t√¨m th·∫•y t·ªáp, t·ªáp ZIP h·ªèng,
    ho·∫∑c l·ªói gi·∫£i m√£ JSON.

    Args:
        zip_file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp ZIP ch·ª©a d·ªØ li·ªáu TikTok.
        internal_file_pattern (str, optional): M·∫´u t√™n t·ªáp ƒë·ªÉ t√¨m ki·∫øm t·ªáp JSON
            b√™n trong t·ªáp ZIP. M·∫∑c ƒë·ªãnh l√† "user_data*.json".

    Returns:
        dict | None: M·ªôt t·ª´ ƒëi·ªÉn ch·ª©a to√†n b·ªô d·ªØ li·ªáu ng∆∞·ªùi d√πng n·∫øu t·∫£i th√†nh c√¥ng.
                      Tr·∫£ v·ªÅ None n·∫øu c√≥ l·ªói x·∫£y ra.
    """
    all_data = None
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zf:
            json_files_in_zip = [
                name for name in zf.namelist()
                if fnmatch.fnmatch(os.path.basename(name).lower(), internal_file_pattern.lower()) and name.endswith(".json")
            ]

            if not json_files_in_zip:
                console.print(f"| üö´ Kh√¥ng t√¨m th·∫•y t·ªáp JSON n√†o kh·ªõp v·ªõi m·∫´u '[yellow]{internal_file_pattern}[/yellow]' trong '[cyan]{zip_file_path}[/cyan]'.")
                console.print(f"| ‚ÑπÔ∏è C√°c t·ªáp c√≥ trong ZIP: {zf.namelist()}")
                return None
            
            preferred_files = [f for f in json_files_in_zip if os.path.basename(f).lower() in ('user_data_tiktok.json', 'user_data.json')]
            if preferred_files:
                 file_to_load = preferred_files[0]
            else:
                 file_to_load = json_files_in_zip[0] 

            console.print(f"| üìÑ T√¨m th·∫•y v√† ƒëang t·∫£i t·ªáp: [cyan]{file_to_load}[/cyan]")
            try:
                with zf.open(file_to_load) as f:
                    file_content = f.read().decode('utf-8')
                    all_data = json.loads(file_content)
            except json.JSONDecodeError as e_json:
                console.print(f"| ‚ùå L·ªói gi·∫£i m√£ JSON t·ª´ t·ªáp '[yellow]{file_to_load}[/yellow]' trong ZIP: {e_json}", style="red")
            except Exception as e_file:
                console.print(f"| ‚ùå L·ªói khi ƒë·ªçc t·ªáp '[yellow]{file_to_load}[/yellow]' t·ª´ ZIP: {e_file}", style="red")

    except FileNotFoundError:
        console.print(f"| üö´ Kh√¥ng t√¨m th·∫•y t·ªáp ZIP: [cyan]{zip_file_path}[/cyan]", style="red")
        return None
    except zipfile.BadZipFile:
        console.print(f"| ‚ùå T·ªáp ZIP kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã h·ªèng: [cyan]{zip_file_path}[/cyan]", style="red")
        return None
    except Exception as e_zip:
        console.print(f"| ‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω t·ªáp ZIP: {e_zip}", style="red")
        return None

    if not all_data:
        console.print(f"| ‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t·∫£i.", style="yellow")
    return all_data

def extract_tiktok_insights(data):
    """
    Tr√≠ch xu·∫•t v√† t·ªïng h·ª£p c√°c th√¥ng tin ch√≠nh (insights) t·ª´ d·ªØ li·ªáu th√¥ c·ªßa TikTok.

    H√†m n√†y l·∫•y t·ª´ ƒëi·ªÉn d·ªØ li·ªáu l·ªõn v√† r√∫t ra c√°c ch·ªâ s·ªë quan tr·ªçng nh∆∞ th√¥ng tin
    c√° nh√¢n, s·ªë li·ªáu ho·∫°t ƒë·ªông, d·ªØ li·ªáu mua s·∫Øm, v.v. N√≥ tr·∫£ v·ªÅ m·ªôt t·ª´ ƒëi·ªÉn
    m·ªõi, g·ªçn g√†ng h∆°n, ch·ª©a c√°c th√¥ng tin ƒë√£ ƒë∆∞·ª£c t√≥m t·∫Øt.

    Args:
        data (dict): T·ª´ ƒëi·ªÉn ch·ª©a to√†n b·ªô d·ªØ li·ªáu TikTok ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ t·ªáp JSON.

    Returns:
        dict: M·ªôt t·ª´ ƒëi·ªÉn ch·ª©a c√°c th√¥ng tin v√† ch·ªâ s·ªë ch√≠nh ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t.
              Tr·∫£ v·ªÅ t·ª´ ƒëi·ªÉn r·ªóng n·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá.
    """
    if not data:
        return {}

    insights = {}

    insights["Username"] = safe_get_data(data, USER_NAME_PATH, "N/A")
    insights["Email"] = safe_get_data(data, EMAIL_PATH, "N/A")
    insights["Phone Number"] = safe_get_data(data, PHONE_PATH, "N/A")
    insights["Bio Description"] = safe_get_data(data, BIO_DESC_PATH, "N/A")
    insights["Birth Date"] = safe_get_data(data, BIRTH_DATE_PATH, "N/A")
    insights["Likes Received"] = safe_get_data(data, LIKES_RECEIVED_PATH, 0)

    insights["App Language"] = safe_get_data(data, APP_LANG_PATH, "N/A")
    insights["Private Account"] = safe_get_data(data, PRIVATE_ACCOUNT_PATH, "N/A")
    insights["Personalized Ads"] = safe_get_data(data, PERSONALIZED_ADS_PATH, "N/A")
    fyp_filters = safe_get_data(data, FYP_KEYWORD_FILTERS_PATH, [])
    insights["FYP Keyword Filters Count"] = len(fyp_filters) if isinstance(fyp_filters, list) else 0

    insights["Videos Watched Count"] = len(safe_get_data(data, WATCH_HISTORY_PATH, []))
    insights["Liked Videos Count"] = len(safe_get_data(data, LIKE_LIST_PATH, []))
    insights["Comments Made Count"] = len(safe_get_data(data, COMMENT_LIST_PATH, []))
    insights["Searches Made Count"] = len(safe_get_data(data, SEARCH_LIST_PATH, []))
    insights["Shares Made Count"] = len(safe_get_data(data, SHARE_HISTORY_PATH, []))
    insights["Login Sessions Count"] = len(safe_get_data(data, LOGIN_HISTORY_PATH, []))
    insights["Followers Count"] = len(safe_get_data(data, FOLLOWER_LIST_PATH, []))
    insights["Following Count"] = len(safe_get_data(data, FOLLOWING_LIST_PATH, []))
    insights["Favorite Videos Count"] = len(safe_get_data(data, FAVORITE_VIDEOS_PATH, []))
    insights["Favorite Sounds Count"] = len(safe_get_data(data, FAVORITE_SOUNDS_PATH, []))
    insights["Blocked Users Count"] = len(safe_get_data(data, BLOCKED_USERS_PATH, []))

    orders = safe_get_data(data, ORDER_HISTORY_PATH, {})
    insights["Shop Orders Count"] = len(orders) if isinstance(orders, dict) else 0
    insights["Shop Product Browsing Count"] = len(safe_get_data(data, PRODUCT_BROWSING_PATH, []))
    insights["Shop Shopping Cart Items Count"] = len(safe_get_data(data, SHOPPING_CART_PATH, []))
    insights["Shop Saved Addresses Count"] = len(safe_get_data(data, SAVED_ADDRESSES_PATH, []))
    insights["Shop Saved Payment Cards Count"] = len(safe_get_data(data, SAVED_PAYMENT_CARDS_PATH, []))

    live_history = safe_get_data(data, WATCH_LIVE_HISTORY_PATH, {})
    insights["Live Sessions Watched Count"] = len(live_history) if isinstance(live_history, dict) else 0
    
    total_live_comments = 0
    if isinstance(live_history, dict):
        for session_id, session_data in live_history.items():
            comments = safe_get_data(session_data, ["Comments"], [])
            valid_comments = [c for c in comments if c.get("CommentContent", "") != "" or c.get("RawTime", -1) != -1]
            total_live_comments += len(valid_comments)
    insights["Live Comments Made Count"] = total_live_comments

    insights["Off-TikTok Activity Events Count"] = len(safe_get_data(data, OFF_TIKTOK_ACTIVITY_PATH, []))
    
    chat_history = safe_get_data(data, DM_CHAT_HISTORY_PATH, {})
    insights["DM Chats Count"] = len(chat_history) if isinstance(chat_history, dict) else 0
    total_dm_messages = 0
    if isinstance(chat_history, dict):
        for chat_name, messages in chat_history.items():
            total_dm_messages += len(messages) if isinstance(messages, list) else 0
    insights["DM Total Messages Count"] = total_dm_messages

    return insights

def display_insights_rich(insights, username="User"):
    """
    Hi·ªÉn th·ªã c√°c th√¥ng tin chi ti·∫øt ƒë√£ t·ªïng h·ª£p ra console m·ªôt c√°ch ƒë·∫πp m·∫Øt.

    S·ª≠ d·ª•ng th∆∞ vi·ªán `rich`, h√†m n√†y t·∫°o ra c√°c b·∫£ng (table) c√≥ ƒë·ªãnh d·∫°ng r√µ r√†ng
    ƒë·ªÉ tr√¨nh b√†y d·ªØ li·ªáu t·ª´ ƒëi·ªÉn `insights` m·ªôt c√°ch tr·ª±c quan v√† d·ªÖ ƒë·ªçc tr√™n terminal.

    Args:
        insights (dict): T·ª´ ƒëi·ªÉn ch·ª©a c√°c th√¥ng tin ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t v√† t·ªïng h·ª£p
                         b·ªüi h√†m `extract_tiktok_insights`.
        username (str, optional): T√™n ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉn th·ªã. M·∫∑c ƒë·ªãnh l√† "User".
    """
    if not insights:
        console.print(f"| ‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt ƒë·ªÉ hi·ªÉn th·ªã.[/red]")
        return

    table_width = 89
    col1_width = 35
    col2_width = 50 

    profile_table = Table(
        title="| üë§ Th√¥ng Tin C√° Nh√¢n",
        show_header=False,
        show_lines=False,
        title_justify="left",
        title_style="none",
        width=table_width
    )
    profile_table.add_column("M·ª•c", style="dim", width=col1_width, justify="left")
    profile_table.add_column("Gi√° tr·ªã", width=col2_width, justify="right")
    profile_table.add_row("T√™n ng∆∞·ªùi d√πng", insights.get("Username", "N/A"))
    profile_table.add_row("Email", insights.get("Email", "N/A"))
    profile_table.add_row("S·ªë ƒëi·ªán tho·∫°i", insights.get("Phone Number", "N/A"))
    bio = insights.get("Bio Description", "N/A")
    profile_table.add_row("Ti·ªÉu s·ª≠", bio if bio else "N/A") 
    profile_table.add_row("Ng√†y sinh", insights.get("Birth Date", "N/A"))
    profile_table.add_row("L∆∞·ª£t th√≠ch ƒë√£ nh·∫≠n", str(insights.get("Likes Received", 0)))
    console.print(profile_table)

    activity_table = Table(
        title="| üöÄ Ho·∫°t ƒê·ªông Ch√≠nh",
        show_header=False,
        show_lines=False,
        title_justify="left",
        title_style="none",
        width=table_width
    )
    activity_table.add_column("M·ª•c", style="dim", width=col1_width, justify="left")
    activity_table.add_column("S·ªë l∆∞·ª£ng", width=col2_width, justify="right")
    activity_table.add_row("Video ƒë√£ xem", str(insights.get("Videos Watched Count", 0)))
    activity_table.add_row("Video ƒë√£ th√≠ch", str(insights.get("Liked Videos Count", 0)))
    activity_table.add_row("B√¨nh lu·∫≠n ƒë√£ ƒëƒÉng", str(insights.get("Comments Made Count", 0)))
    activity_table.add_row("L∆∞·ª£t t√¨m ki·∫øm", str(insights.get("Searches Made Count", 0)))
    activity_table.add_row("L∆∞·ª£t chia s·∫ª", str(insights.get("Shares Made Count", 0)))
    activity_table.add_row("Phi√™n ƒëƒÉng nh·∫≠p", str(insights.get("Login Sessions Count", 0)))
    activity_table.add_row("Ng∆∞·ªùi theo d√µi", str(insights.get("Followers Count", 0)))
    activity_table.add_row("ƒêang theo d√µi", str(insights.get("Following Count", 0)))
    activity_table.add_row("Video y√™u th√≠ch", str(insights.get("Favorite Videos Count", 0)))
    activity_table.add_row("√Çm thanh y√™u th√≠ch", str(insights.get("Favorite Sounds Count", 0)))
    activity_table.add_row("Ng∆∞·ªùi d√πng b·ªã ch·∫∑n", str(insights.get("Blocked Users Count", 0)))
    console.print(activity_table)
    
    dm_table = Table(
        title="| üí¨ Tin Nh·∫Øn Tr·ª±c Ti·∫øp (DM)",
        show_header=False,
        show_lines=False,
        title_justify="left",
        title_style="none",
        width=table_width
    )
    dm_table.add_column("M·ª•c", style="dim", width=col1_width, justify="left")
    dm_table.add_column("S·ªë l∆∞·ª£ng", width=col2_width, justify="right")
    dm_table.add_row("S·ªë cu·ªôc tr√≤ chuy·ªán", str(insights.get("DM Chats Count",0)))
    dm_table.add_row("T·ªïng s·ªë tin nh·∫Øn", str(insights.get("DM Total Messages Count",0)))
    console.print(dm_table)

    shop_table = Table(
        title="| üõçÔ∏è  TikTok Shop",
        show_header=False,
        show_lines=False,
        title_justify="left",
        title_style="none",
        width=table_width
    )
    shop_table.add_column("M·ª•c", style="dim", width=col1_width, justify="left")
    shop_table.add_column("S·ªë l∆∞·ª£ng", width=col2_width, justify="right")
    shop_table.add_row("ƒê∆°n h√†ng ƒë√£ ƒë·∫∑t", str(insights.get("Shop Orders Count", 0)))
    shop_table.add_row("L∆∞·ª£t xem s·∫£n ph·∫©m", str(insights.get("Shop Product Browsing Count", 0)))
    shop_table.add_row("S·∫£n ph·∫©m trong gi·ªè h√†ng", str(insights.get("Shop Shopping Cart Items Count", 0)))
    shop_table.add_row("ƒê·ªãa ch·ªâ ƒë√£ l∆∞u", str(insights.get("Shop Saved Addresses Count", 0)))
    shop_table.add_row("Th·∫ª thanh to√°n ƒë√£ l∆∞u", str(insights.get("Shop Saved Payment Cards Count", 0)))
    console.print(shop_table)

    live_table = Table(
        title="| üî¥ TikTok Live",
        show_header=False,
        show_lines=False,
        title_justify="left",
        title_style="none",
        width=table_width
    )
    live_table.add_column("M·ª•c", style="dim", width=col1_width, justify="left")
    live_table.add_column("S·ªë l∆∞·ª£ng", width=col2_width, justify="right")
    live_table.add_row("Live ƒë√£ xem", str(insights.get("Live Sessions Watched Count", 0)))
    live_table.add_row("B√¨nh lu·∫≠n trong Live", str(insights.get("Live Comments Made Count", 0)))
    console.print(live_table)

    other_table = Table(
        title="| ‚öôÔ∏è  C√†i ƒê·∫∑t & D·ªØ Li·ªáu Kh√°c",
        show_header=False,
        show_lines=False,
        title_style="none",
        title_justify="left",
        width=table_width
    )
    other_table.add_column("M·ª•c", style="dim", width=col1_width, justify="left")
    other_table.add_column("Gi√° tr·ªã / S·ªë l∆∞·ª£ng", width=col2_width, justify="right") 
    other_table.add_row("Ng√¥n ng·ªØ ·ª©ng d·ª•ng", insights.get("App Language", "N/A"))
    other_table.add_row("T√†i kho·∫£n ri√™ng t∆∞", str(insights.get("Private Account", "N/A"))) 
    other_table.add_row("Qu·∫£ng c√°o c√° nh√¢n ho√°", str(insights.get("Personalized Ads", "N/A"))) 
    other_table.add_row("B·ªô l·ªçc t·ª´ kho√° FYP", str(insights.get("FYP Keyword Filters Count",0)))
    other_table.add_row("S·ª± ki·ªán ho·∫°t ƒë·ªông Off-TikTok", str(insights.get("Off-TikTok Activity Events Count", 0)))
    console.print(other_table)


def export_detailed_data_to_excel(data, excel_writer):
    """
    Xu·∫•t c√°c danh s√°ch d·ªØ li·ªáu chi ti·∫øt v√†o c√°c sheet ri√™ng bi·ªát c·ªßa m·ªôt t·ªáp Excel.

    H√†m n√†y duy·ªát qua d·ªØ li·ªáu th√¥, chuy·ªÉn ƒë·ªïi c√°c ph·∫ßn d·ªØ li·ªáu nh∆∞ l·ªãch s·ª≠ xem,
    danh s√°ch th√≠ch, b√¨nh lu·∫≠n, v.v., th√†nh c√°c DataFrame c·ªßa Pandas v√† ghi ch√∫ng
    v√†o ƒë·ªëi t∆∞·ª£ng `ExcelWriter` ƒë∆∞·ª£c cung c·∫•p.

    Args:
        data (dict): T·ª´ ƒëi·ªÉn ch·ª©a to√†n b·ªô d·ªØ li·ªáu th√¥ c·ªßa TikTok.
        excel_writer (pd.ExcelWriter): ƒê·ªëi t∆∞·ª£ng `ExcelWriter` c·ªßa Pandas ƒë·ªÉ
                                       ghi d·ªØ li·ªáu v√†o t·ªáp Excel.

    Returns:
        Ghi d·ªØ li·ªáu v√†o `excel_writer`.
    """
    if not data:
        return

    watch_history = safe_get_data(data, WATCH_HISTORY_PATH, [])
    if watch_history:
        pd.DataFrame(watch_history).to_excel(excel_writer, sheet_name="Watch History", index=False)

    like_list = safe_get_data(data, LIKE_LIST_PATH, [])
    if like_list:
        pd.DataFrame(like_list).to_excel(excel_writer, sheet_name="Liked Videos", index=False)

    comments = safe_get_data(data, COMMENT_LIST_PATH, [])
    if comments:
        pd.DataFrame(comments).to_excel(excel_writer, sheet_name="Comments Made", index=False)

    searches = safe_get_data(data, SEARCH_LIST_PATH, [])
    if searches:
        pd.DataFrame(searches).to_excel(excel_writer, sheet_name="Search History", index=False)

    logins = safe_get_data(data, LOGIN_HISTORY_PATH, [])
    if logins:
        pd.DataFrame(logins).to_excel(excel_writer, sheet_name="Login History", index=False)
        
    blocked = safe_get_data(data, BLOCKED_USERS_PATH, [])
    if blocked:
        pd.DataFrame(blocked).to_excel(excel_writer, sheet_name="Blocked Users", index=False)

    followers = safe_get_data(data, FOLLOWER_LIST_PATH, [])
    if followers:
        pd.DataFrame(followers).to_excel(excel_writer, sheet_name="Followers", index=False)

    following = safe_get_data(data, FOLLOWING_LIST_PATH, [])
    if following:
        pd.DataFrame(following).to_excel(excel_writer, sheet_name="Following", index=False)
        
    fav_videos = safe_get_data(data, FAVORITE_VIDEOS_PATH, [])
    if fav_videos:
        pd.DataFrame(fav_videos).to_excel(excel_writer, sheet_name="Favorite Videos", index=False)

    fav_sounds = safe_get_data(data, FAVORITE_SOUNDS_PATH, [])
    if fav_sounds:
        pd.DataFrame(fav_sounds).to_excel(excel_writer, sheet_name="Favorite Sounds", index=False)
        
    orders_dict = safe_get_data(data, ORDER_HISTORY_PATH, {})
    if orders_dict:
        orders_list = []
        for order_id, order_details in orders_dict.items():
            order_details['order_id_from_key'] = order_id 
            orders_list.append(order_details)
        if orders_list:
            pd.DataFrame(orders_list).to_excel(excel_writer, sheet_name="Shop Order History", index=False)
            
    browsing = safe_get_data(data, PRODUCT_BROWSING_PATH, [])
    if browsing:
        pd.DataFrame(browsing).to_excel(excel_writer, sheet_name="Shop Product Browsing", index=False)

    cart = safe_get_data(data, SHOPPING_CART_PATH, [])
    if cart:
        pd.DataFrame(cart).to_excel(excel_writer, sheet_name="Shop Shopping Cart", index=False)

    live_map = safe_get_data(data, WATCH_LIVE_HISTORY_PATH, {})
    live_list_for_excel = []
    if live_map:
        for live_id, details in live_map.items():
            entry = {"LiveSessionID": live_id, "WatchTime": details.get("WatchTime")}
            comments = details.get("Comments", [])
            valid_comments = [c.get("CommentContent") for c in comments if c.get("CommentContent", "") != "" or c.get("RawTime", -1) != -1]
            entry["CommentsInLive"] = "; ".join(valid_comments) if valid_comments else ""
            live_list_for_excel.append(entry)
        if live_list_for_excel:
            pd.DataFrame(live_list_for_excel).to_excel(excel_writer, sheet_name="Watch Live History", index=False)

    dm_history = safe_get_data(data, DM_CHAT_HISTORY_PATH, {})
    all_dms_flat = []
    if dm_history:
        for chat_with, messages in dm_history.items():
            chat_name = chat_with.replace("Chat History with ", "").replace(":", "")
            if isinstance(messages, list):
                for msg in messages:
                    msg_copy = msg.copy()
                    msg_copy["ChatWith"] = chat_name
                    all_dms_flat.append(msg_copy)
        if all_dms_flat:
             pd.DataFrame(all_dms_flat).to_excel(excel_writer, sheet_name="Direct Messages", index=False)


def export_insights_to_excel(insights, full_data, excel_path="tiktok_analysis_summary.xlsx"):
    """
    ƒêi·ªÅu ph·ªëi vi·ªác xu·∫•t c·∫£ d·ªØ li·ªáu t·ªïng quan v√† chi ti·∫øt ra m·ªôt t·ªáp Excel duy nh·∫•t.

    H√†m n√†y t·∫°o m·ªôt t·ªáp Excel, ghi d·ªØ li·ªáu t·ªïng h·ª£p `insights` v√†o m·ªôt sheet
    t√™n l√† "T·ªïng Quan", sau ƒë√≥ g·ªçi h√†m `export_detailed_data_to_excel` ƒë·ªÉ ghi
    t·∫•t c·∫£ c√°c d·ªØ li·ªáu chi ti·∫øt kh√°c v√†o c√°c sheet c√≤n l·∫°i.

    Args:
        insights (dict): T·ª´ ƒëi·ªÉn ch·ª©a d·ªØ li·ªáu t·ªïng quan.
        full_data (dict): T·ª´ ƒëi·ªÉn ch·ª©a to√†n b·ªô d·ªØ li·ªáu th√¥ c·ªßa TikTok.
        excel_path (str, optional): T√™n v√† ƒë∆∞·ªùng d·∫´n c·ªßa t·ªáp Excel ƒë·∫ßu ra.
                                    M·∫∑c ƒë·ªãnh l√† "tiktok_analysis_summary.xlsx".

    Returns:
        T·∫°o ra m·ªôt t·ªáp Excel.
    """
    console.print(f"\nüìö [bold green]Xu·∫•t ra EXCEL[/bold green]")
    if not insights:
        console.print(f"| ‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt ƒë·ªÉ xu·∫•t ra Excel.[/red]")
        return

    try:
        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            summary_df = pd.DataFrame(list(insights.items()), columns=['M·ª•c Ph√¢n T√≠ch', 'Gi√° tr·ªã'])
            summary_df.to_excel(writer, sheet_name="T·ªïng Quan", index=False)
            
            export_detailed_data_to_excel(full_data, writer)

        console.print(f"| üíæ ƒê√£ xu·∫•t k·∫øt qu·∫£ ph√¢n t√≠ch chi ti·∫øt ra: [cyan]{excel_path}[/cyan]")
    except Exception as e:
        console.print(f"| ‚ùå L·ªói khi xu·∫•t ra Excel: {e}[/red]")

def main():
    """
    H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn to√†n b·ªô quy tr√¨nh c·ªßa ch∆∞∆°ng tr√¨nh.

    ƒê√¢y l√† ƒëi·ªÉm b·∫Øt ƒë·∫ßu th·ª±c thi. H√†m n√†y s·∫Ω:
    1. T√¨m ki·∫øm t·ªáp d·ªØ li·ªáu ZIP c·ªßa TikTok trong th∆∞ m·ª•c ch·ªâ ƒë·ªãnh.
    2. G·ªçi h√†m ƒë·ªÉ t·∫£i v√† ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ t·ªáp ZIP.
    3. N·∫øu t·∫£i th√†nh c√¥ng, g·ªçi h√†m ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng tin chi ti·∫øt.
    4. Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng quan ra console.
    5. Xu·∫•t b√°o c√°o ƒë·∫ßy ƒë·ªß (t·ªïng quan v√† chi ti·∫øt) ra t·ªáp Excel.
    """
    ZIP_FILE_PATH = None
    zip_file_pattern = ZIP_FILE_PATTERN

    zip_files_found = glob.glob(zip_file_pattern)
    console.print(f"üöÄ[bold green] B·∫Øt ƒë·∫ßu ph√¢n t√≠ch d·ªØ li·ªáu TIKTOK[bold green]")         
    if not zip_files_found:
        console.print(f"| üö´ Kh√¥ng t√¨m th·∫•y t·ªáp ZIP n√†o kh·ªõp v·ªõi m·∫´u '[yellow]{zip_file_pattern}[/yellow]' trong th∆∞ m·ª•c hi·ªán t·∫°i.")
        console.print(f"| ‚ÑπÔ∏è  H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒë·∫∑t t√™n t·ªáp ZIP ch√≠nh x√°c (v√≠ d·ª•: TikTok_Data_12345.zip) v√† ƒë·∫∑t n√≥ v√†o folder data.")
    else:
        if len(zip_files_found) > 1:
            console.print(f"| ‚ÑπÔ∏è T√¨m th·∫•y nhi·ªÅu t·ªáp ZIP kh·ªõp m·∫´u. S·ª≠ d·ª•ng t·ªáp ƒë·∫ßu ti√™n: [cyan]{zip_files_found[0]}[/cyan]")
        ZIP_FILE_PATH = zip_files_found[0]
        console.print(f"| üìÑ S·ª≠ d·ª•ng t·ªáp d·ªØ li·ªáu: [cyan]{ZIP_FILE_PATH}[/cyan]")

    if ZIP_FILE_PATH and os.path.exists(ZIP_FILE_PATH):
        tiktok_data = load_tiktok_data_from_zip(ZIP_FILE_PATH, internal_file_pattern="user_data*.json")

        if tiktok_data:
            insights = extract_tiktok_insights(tiktok_data)
            username = insights.get("Username", "Ng∆∞·ªùi d√πng")
            
            console.print(f"\nüìä[bold green] K·∫øt qu·∫£ ph√¢n t√≠ch[/bold green]")
            display_insights_rich(insights, username=username)
            
            export_insights_to_excel(insights, tiktok_data, excel_path="tiktok_analysis_report.xlsx")
        else:
            console.print(f"| ‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu TikTok t·ª´ t·ªáp ƒë√£ ch·ªçn.")
    elif ZIP_FILE_PATH and not os.path.exists(ZIP_FILE_PATH):
        console.print(f"| ‚ùå T·ªáp ZIP '{ZIP_FILE_PATH}' ƒë∆∞·ª£c t√¨m th·∫•y b·ªüi glob nh∆∞ng kh√¥ng th·ªÉ truy c·∫≠p. Ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† quy·ªÅn.")
    else:
        pass

if __name__ == "__main__":
    main()