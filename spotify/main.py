import json
import pandas as pd
from collections import Counter
from datetime import datetime, timedelta
import os
import zipfile
import fnmatch
from rich.console import Console
from rich.table import Table

TIMESTAMP_COL = 'ts'
TRACK_NAME_COL = 'master_metadata_track_name'
ARTIST_NAME_COL = 'master_metadata_album_artist_name'
MS_PLAYED_COL = 'ms_played'
EPISODE_NAME_COL = 'episode_name'
MIN_MS_PLAYED_FOR_COUNT = 15000

ZIP_FILE_PATH = "./data/my_spotify_data.zip"
INTERNAL_JSON_PATTERN = "Streaming_History_*.json" # Handles both StreamingHistoryX.json and Streaming_History_Audio_*.json

console = Console()

def load_streaming_data_from_zip(zip_file_path, internal_file_pattern="Streaming_History_*.json"):
    """T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ nghe nh·∫°c t·ª´ t·ªáp ZIP c·ªßa Spotify.

    H√†m n√†y ƒë·ªçc t·ªáp ZIP ƒë∆∞·ª£c cung c·∫•p, t√¨m c√°c t·ªáp JSON kh·ªõp v·ªõi `internal_file_pattern`
    (m·∫∑c ƒë·ªãnh l√† "Streaming_History_*.json"), v√† g·ªôp n·ªôi dung c·ªßa ch√∫ng v√†o m·ªôt DataFrame.
    X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói nh∆∞ kh√¥ng t√¨m th·∫•y t·ªáp ZIP, t·ªáp ZIP kh√¥ng h·ª£p l·ªá,
    ho·∫∑c l·ªói gi·∫£i m√£ JSON.

    Args:
        zip_file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp ZIP ch·ª©a d·ªØ li·ªáu Spotify.
        internal_file_pattern (str, optional): M·∫´u ƒë·ªÉ kh·ªõp t√™n t·ªáp JSON b√™n trong ZIP.
                                            M·∫∑c ƒë·ªãnh l√† "Streaming_History_*.json".

    Returns:
        pd.DataFrame: DataFrame ch·ª©a t·∫•t c·∫£ c√°c m·ª•c t·ª´ c√°c t·ªáp JSON,
                      ho·∫∑c DataFrame r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c x·∫£y ra l·ªói.
    """
    all_entries = []
    console.print(f"| üîÑ ƒêang c·ªë g·∫Øng ƒë·ªçc t·ª´ file ZIP: [cyan]{zip_file_path}[/cyan]")
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zf:
            json_files_in_zip = [
                name for name in zf.namelist()
                if fnmatch.fnmatch(os.path.basename(name), internal_file_pattern) and name.endswith(".json")
            ]

            if not json_files_in_zip:
                console.print(f"| üö´ Kh√¥ng t√¨m th·∫•y t·ªáp JSON n√†o kh·ªõp v·ªõi m·∫´u '[yellow]{internal_file_pattern}[/yellow]' trong '[cyan]{zip_file_path}[/cyan]'.")
                console.print(f"|    C√°c t·ªáp c√≥ trong ZIP: {zf.namelist()}")
                return pd.DataFrame()

            for file_name_in_zip in json_files_in_zip:
                try:
                    with zf.open(file_name_in_zip) as f:
                        file_content = f.read().decode('utf-8')
                        data = json.loads(file_content)
                        all_entries.extend(data)
                except json.JSONDecodeError as e_json:
                    console.print(f"| ‚ùå L·ªói gi·∫£i m√£ JSON t·ª´ t·ªáp '[yellow]{file_name_in_zip}[/yellow]' trong ZIP: {e_json}", style="red")
                except Exception as e_file:
                    console.print(f"| ‚ùå L·ªói khi ƒë·ªçc t·ªáp '[yellow]{file_name_in_zip}[/yellow]' t·ª´ ZIP: {e_file}", style="red")
    except FileNotFoundError:
        console.print(f"| üö´ Kh√¥ng t√¨m th·∫•y t·ªáp ZIP: [cyan]{zip_file_path}[/cyan]", style="red")
        return pd.DataFrame()
    except zipfile.BadZipFile:
        console.print(f"| üö´ T·ªáp ZIP kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã h·ªèng: [cyan]{zip_file_path}[/cyan]", style="red")
        return pd.DataFrame()
    except Exception as e_zip:
        console.print(f"| ‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω t·ªáp ZIP: {e_zip}", style="red")
        return pd.DataFrame()

    if not all_entries:
        console.print("| ü§∑ Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t·∫£i t·ª´ c√°c t·ªáp JSON trong ZIP.", style="yellow")
        return pd.DataFrame()

    df = pd.DataFrame(all_entries)
    return df

def preprocess_data(df):
    """Ti·ªÅn x·ª≠ l√Ω DataFrame d·ªØ li·ªáu th√¥ t·ª´ Spotify.

    H√†m n√†y th·ª±c hi·ªán c√°c b∆∞·ªõc sau:
    1. Chu·∫©n h√≥a t√™n c·ªôt (v√≠ d·ª•: 'endTime' -> 'ts', 'trackName' -> 'master_metadata_track_name').
    2. Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa c√°c c·ªôt c·∫ßn thi·∫øt cho ph√¢n t√≠ch b√†i h√°t.
    3. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p thi·∫øu t√™n ngh·ªá sƒ© (`ARTIST_NAME_COL`) b·∫±ng c√°ch ƒëi·ªÅn 'Kh√¥ng x√°c ƒë·ªãnh'.
    4. Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu cho c·ªôt th·ªùi gian (`TIMESTAMP_COL`) sang datetime v√†
       th·ªùi gian nghe (`MS_PLAYED_COL`) sang numeric.
    5. Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu v√† cu·ªëi t√™n b√†i h√°t v√† t√™n ngh·ªá sƒ©.
    6. Lo·∫°i b·ªè c√°c d√≤ng c√≥ gi√° tr·ªã r·ªóng (NaN) ·ªü c√°c c·ªôt quan tr·ªçng (`TIMESTAMP_COL`, `TRACK_NAME_COL`, `MS_PLAYED_COL`).
    7. L·ªçc c√°c b·∫£n nh·∫°c ƒë∆∞·ª£c nghe d∆∞·ªõi `MIN_MS_PLAYED_FOR_COUNT` (m·∫∑c ƒë·ªãnh 15 gi√¢y).
    8. T·∫°o c·ªôt 'year' t·ª´ timestamp v√† 'fullSongName' (T√™n b√†i h√°t - T√™n ngh·ªá sƒ©).

    Args:
        df (pd.DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu th√¥ ƒë∆∞·ª£c t·∫£i t·ª´ c√°c t·ªáp JSON.

    Returns:
        pd.DataFrame: DataFrame ƒë√£ ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω, ch·ªâ ch·ª©a d·ªØ li·ªáu b√†i h√°t h·ª£p l·ªá,
                      ho·∫∑c DataFrame r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi x·ª≠ l√Ω.
    """
    if df.empty: return pd.DataFrame()
    initial_count = len(df)

    column_mapping = {
        'ts': TIMESTAMP_COL, 'endTime': TIMESTAMP_COL,
        'master_metadata_track_name': TRACK_NAME_COL, 'trackName': TRACK_NAME_COL, 'track_name': TRACK_NAME_COL,
        'master_metadata_album_artist_name': ARTIST_NAME_COL, 'artistName': ARTIST_NAME_COL, 'artist_name': ARTIST_NAME_COL,
        'ms_played': MS_PLAYED_COL, 'msPlayed': MS_PLAYED_COL,
        'episode_name': EPISODE_NAME_COL
    }

    df.rename(columns=lambda c: column_mapping.get(c, c), inplace=True)

    required_cols_for_songs = [TIMESTAMP_COL, TRACK_NAME_COL, ARTIST_NAME_COL, MS_PLAYED_COL]

    if not all(col in df.columns for col in required_cols_for_songs):
        missing = [col for col in required_cols_for_songs if col not in df.columns]
        console.print(f"| üö´ L·ªñI: Thi·∫øu c·ªôt b√†i h√°t b·∫Øt bu·ªôc: {', '.join(missing)}.", style="red")
        console.print(f"|    C√°c c·ªôt c√≥ trong d·ªØ li·ªáu: {list(df.columns)}")
        if TRACK_NAME_COL not in df.columns and EPISODE_NAME_COL in df.columns:
            console.print("| ‚ö†Ô∏è Ch·ªâ c√≥ d·ªØ li·ªáu podcast (episode_name). S·∫Ω b·ªè qua ph√¢n t√≠ch b√†i h√°t.", style="yellow")
        elif ARTIST_NAME_COL not in missing or len(missing) == 1 and ARTIST_NAME_COL in missing:
             pass
        else:
            return pd.DataFrame()

    df_songs = df[df[TRACK_NAME_COL].notna()].copy()

    if df_songs.empty:
        console.print("| ü§∑ Kh√¥ng c√≥ b√†i h√°t n√†o (d·ªØ li·ªáu track_name b·ªã thi·∫øu ho·∫∑c r·ªóng) ƒë·ªÉ ph√¢n t√≠ch.", style="yellow")
        return pd.DataFrame()

    if ARTIST_NAME_COL not in df_songs.columns:
        console.print(f"| ‚ö†Ô∏è C·ªôt '{ARTIST_NAME_COL}' kh√¥ng t√¨m th·∫•y. S·∫Ω s·ª≠ d·ª•ng 'Kh√¥ng x√°c ƒë·ªãnh' cho t√™n ngh·ªá sƒ©.", style="yellow")
        df_songs[ARTIST_NAME_COL] = "Kh√¥ng x√°c ƒë·ªãnh"


    if not all(col in df_songs.columns for col in required_cols_for_songs):
        missing_after_fill = [col for col in required_cols_for_songs if col not in df_songs.columns]
        console.print(f"| üö´ L·ªñI: Thi·∫øu c·ªôt b√†i h√°t thi·∫øt y·∫øu sau khi x·ª≠ l√Ω: {', '.join(missing_after_fill)}.", style="red")
        return pd.DataFrame()


    df_songs[MS_PLAYED_COL] = pd.to_numeric(df_songs[MS_PLAYED_COL], errors='coerce')
    df_songs[TIMESTAMP_COL] = pd.to_datetime(df_songs[TIMESTAMP_COL], errors='coerce')

    if TRACK_NAME_COL in df_songs.columns and df_songs[TRACK_NAME_COL].dtype == 'object':
        df_songs[TRACK_NAME_COL] = df_songs[TRACK_NAME_COL].str.strip()
    if ARTIST_NAME_COL in df_songs.columns and df_songs[ARTIST_NAME_COL].dtype == 'object':
        df_songs[ARTIST_NAME_COL] = df_songs[ARTIST_NAME_COL].str.strip()

    df_songs.dropna(subset=[TIMESTAMP_COL, TRACK_NAME_COL, MS_PLAYED_COL], inplace=True)
    if df_songs.empty:
        console.print("| üóëÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi lo·∫°i b·ªè NaN t·ª´ c√°c c·ªôt b√†i h√°t thi·∫øt y·∫øu.", style="yellow")
        return pd.DataFrame()

    df_songs = df_songs[df_songs[MS_PLAYED_COL] >= MIN_MS_PLAYED_FOR_COUNT].copy()
    if df_songs.empty:
        console.print(f"| üéß Kh√¥ng c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c nghe qu√° {MIN_MS_PLAYED_FOR_COUNT/1000} gi√¢y.", style="yellow")
        return pd.DataFrame()

    df_songs['year'] = df_songs[TIMESTAMP_COL].dt.year
    df_songs['fullSongName'] = df_songs[TRACK_NAME_COL] + " - " + df_songs[ARTIST_NAME_COL].fillna("Kh√¥ng x√°c ƒë·ªãnh")

    processed_count = len(df_songs)
    if initial_count > 0 and processed_count > 0:
         console.print(f"| ‚ú® Ti·ªÅn x·ª≠ l√Ω: {initial_count} m·ª•c ban ƒë·∫ßu -> {processed_count} m·ª•c b√†i h√°t h·ª£p l·ªá sau khi l·ªçc.")
    elif initial_count > 0 and processed_count == 0:
         console.print("| ‚ú® Ti·ªÅn x·ª≠ l√Ω: kh√¥ng c√≥ m·ª•c b√†i h√°t h·ª£p l·ªá n√†o sau khi l·ªçc.", style="yellow")
    return df_songs

def format_ms_to_detailed_play_time_string(ms):
    """Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ miligi√¢y sang chu·ªói ƒë·ªãnh d·∫°ng chi ti·∫øt (ph√∫t v√† gi·ªù).

    V√≠ d·ª•: 120000 ms s·∫Ω ƒë∆∞·ª£c chuy·ªÉn th√†nh "120 ph√∫t (2.0 gi·ªù)".
    Tr·∫£ v·ªÅ "0 ph√∫t (0.0 gi·ªù)" n·∫øu ƒë·∫ßu v√†o l√† NaN ho·∫∑c √¢m.

    Args:
        ms (int | float): Th·ªùi gian nghe t√≠nh b·∫±ng miligi√¢y.

    Returns:
        str: Chu·ªói bi·ªÉu di·ªÖn th·ªùi gian ƒë√£ ƒë·ªãnh d·∫°ng (v√≠ d·ª•: "1,234 ph√∫t (20.6 gi·ªù)").
    """
    if pd.isna(ms) or ms < 0: return "0 ph√∫t (0.0 gi·ªù)"
    total_seconds = int(ms / 1000)
    total_minutes = total_seconds // 60
    total_hours = total_minutes / 60
    return f"{total_minutes:,} ph√∫t ({total_hours:.1f} gi·ªù)"

def calculate_top_songs_data(df, top_n=10):
    """T√≠nh to√°n top N b√†i h√°t d·ª±a tr√™n s·ªë l·∫ßn nghe v√† t·ªïng th·ªùi gian nghe.

    H√†m n√†y nh√≥m d·ªØ li·ªáu theo 'fullSongName' (T√™n b√†i h√°t - T√™n ngh·ªá sƒ©),
    ƒë·∫øm s·ªë l·∫ßn nghe v√† t√≠nh t·ªïng th·ªùi gian nghe (ms) cho m·ªói b√†i.
    N·∫øu 'fullSongName' kh√¥ng t·ªìn t·∫°i, n√≥ s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª´ `TRACK_NAME_COL` v√† `ARTIST_NAME_COL`.
    Sau ƒë√≥, s·∫Øp x·∫øp ƒë·ªÉ l·∫•y ra `top_n` b√†i h√°t h√†ng ƒë·∫ßu.

    Args:
        df (pd.DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu b√†i h√°t ƒë√£ ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω.
                           C·∫ßn c√≥ c·ªôt `MS_PLAYED_COL` v√† c√°c c·ªôt ƒë·ªÉ t·∫°o 'fullSongName'
                           (`TRACK_NAME_COL`, `ARTIST_NAME_COL`).
        top_n (int, optional): S·ªë l∆∞·ª£ng b√†i h√°t h√†ng ƒë·∫ßu mu·ªën l·∫•y. M·∫∑c ƒë·ªãnh l√† 10.

    Returns:
        pd.DataFrame: DataFrame ch·ª©a top N b√†i h√°t, v·ªõi index l√† 'fullSongName'
                      v√† c√°c c·ªôt 'S·ªë l·∫ßn nghe', 'T·ªïng th·ªùi gian nghe (ms)'.
                      Tr·∫£ v·ªÅ DataFrame r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt.
    """
    if df.empty: return pd.DataFrame()
    df_copy = df.copy()

    if 'fullSongName' not in df_copy.columns:
        if TRACK_NAME_COL in df_copy.columns and ARTIST_NAME_COL in df_copy.columns:
            df_copy['fullSongName'] = df_copy[TRACK_NAME_COL] + " - " + df_copy[ARTIST_NAME_COL].fillna("Kh√¥ng x√°c ƒë·ªãnh")
        elif TRACK_NAME_COL in df_copy.columns:
            console.print("| ‚ö†Ô∏è Thi·∫øu 'ARTIST_NAME_COL', 'fullSongName' s·∫Ω ch·ªâ d·ª±a tr√™n 'TRACK_NAME_COL'.", style="yellow")
            df_copy['fullSongName'] = df_copy[TRACK_NAME_COL]
        else:
            console.print("| üö´ Kh√¥ng th·ªÉ t·∫°o 'fullSongName' do thi·∫øu 'TRACK_NAME_COL'.", style="red")
            return pd.DataFrame()

    counts = df_copy['fullSongName'].value_counts()
    times = df_copy.groupby('fullSongName')[MS_PLAYED_COL].sum()

    top_df = pd.DataFrame({'S·ªë l·∫ßn nghe': counts, 'T·ªïng th·ªùi gian nghe (ms)': times})
    return top_df.sort_values(by=['S·ªë l·∫ßn nghe', 'T·ªïng th·ªùi gian nghe (ms)'], ascending=[False, False]).head(top_n)

def calculate_top_artists_data(df, top_n=10):
    """T√≠nh to√°n top N ngh·ªá sƒ© d·ª±a tr√™n s·ªë l·∫ßn nghe v√† t·ªïng th·ªùi gian nghe c√°c b√†i h√°t c·ªßa h·ªç.

    H√†m n√†y nh√≥m d·ªØ li·ªáu theo `ARTIST_NAME_COL`, ƒë·∫øm t·ªïng s·ªë l·∫ßn c√°c b√†i h√°t
    c·ªßa ngh·ªá sƒ© ƒë√≥ ƒë∆∞·ª£c nghe v√† t√≠nh t·ªïng th·ªùi gian nghe (ms) cho m·ªói ngh·ªá sƒ©.
    Sau ƒë√≥, s·∫Øp x·∫øp ƒë·ªÉ l·∫•y ra `top_n` ngh·ªá sƒ© h√†ng ƒë·∫ßu.
    Y√™u c·∫ßu c·ªôt `ARTIST_NAME_COL` ph·∫£i t·ªìn t·∫°i v√† kh√¥ng r·ªóng trong d·ªØ li·ªáu.

    Args:
        df (pd.DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu b√†i h√°t ƒë√£ ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω.
                           C·∫ßn c√≥ c·ªôt `ARTIST_NAME_COL` v√† `MS_PLAYED_COL`.
        top_n (int, optional): S·ªë l∆∞·ª£ng ngh·ªá sƒ© h√†ng ƒë·∫ßu mu·ªën l·∫•y. M·∫∑c ƒë·ªãnh l√† 10.

    Returns:
        pd.DataFrame: DataFrame ch·ª©a top N ngh·ªá sƒ©, v·ªõi index l√† `ARTIST_NAME_COL`
                      v√† c√°c c·ªôt 'S·ªë l·∫ßn nghe', 'T·ªïng th·ªùi gian nghe (ms)'.
                      Tr·∫£ v·ªÅ DataFrame r·ªóng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, thi·∫øu c·ªôt `ARTIST_NAME_COL`,
                      ho·∫∑c t·∫•t c·∫£ t√™n ngh·ªá sƒ© ƒë·ªÅu r·ªóng.
    """
    if df.empty or ARTIST_NAME_COL not in df.columns:
        console.print("| ü§∑ Kh√¥ng c√≥ d·ªØ li·ªáu ngh·ªá sƒ© ho·∫∑c thi·∫øu c·ªôt 'ARTIST_NAME_COL'.", style="yellow")
        return pd.DataFrame()

    df_artists = df[df[ARTIST_NAME_COL].notna()].copy()
    if df_artists.empty:
        console.print("| ü§∑ Kh√¥ng c√≥ d·ªØ li·ªáu ngh·ªá sƒ© h·ª£p l·ªá (t√™n ngh·ªá sƒ© b·ªã thi·∫øu).", style="yellow")
        return pd.DataFrame()

    artist_play_counts = df_artists[ARTIST_NAME_COL].value_counts()
    artist_total_time_ms = df_artists.groupby(ARTIST_NAME_COL)[MS_PLAYED_COL].sum()

    top_artists_df = pd.DataFrame({
        'S·ªë l·∫ßn nghe': artist_play_counts,
        'T·ªïng th·ªùi gian nghe (ms)': artist_total_time_ms
    })

    return top_artists_df.sort_values(
        by=['S·ªë l·∫ßn nghe', 'T·ªïng th·ªùi gian nghe (ms)'],
        ascending=[False, False]
    ).head(top_n)

def display_analysis_results(df_period_songs, period_name_display, top_n=10):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch cho m·ªôt giai ƒëo·∫°n nh·∫•t ƒë·ªãnh l√™n console.

    Bao g·ªìm th·ªëng k√™ chung (s·ªë b√†i h√°t/ngh·ªá sƒ© duy nh·∫•t, t·ªïng th·ªùi gian nghe)
    v√† b·∫£ng top N b√†i h√°t, top N ngh·ªá sƒ© cho giai ƒëo·∫°n ƒë∆∞·ª£c cung c·∫•p.
    S·ª≠ d·ª•ng th∆∞ vi·ªán `rich.Table` ƒë·ªÉ ƒë·ªãnh d·∫°ng b·∫£ng cho ƒë·∫πp m·∫Øt.

    Args:
        df_period_songs (pd.DataFrame): DataFrame ch·ª©a d·ªØ li·ªáu b√†i h√°t c·ªßa giai ƒëo·∫°n c·∫ßn ph√¢n t√≠ch.
        period_name_display (str): T√™n hi·ªÉn th·ªã cho giai ƒëo·∫°n (v√≠ d·ª•: "T·∫•t C·∫£ Th·ªùi Gian", "NƒÇM 2023").
        top_n (int, optional): S·ªë l∆∞·ª£ng m·ª•c (b√†i h√°t/ngh·ªá sƒ©) h√†ng ƒë·∫ßu ƒë·ªÉ hi·ªÉn th·ªã trong c√°c b·∫£ng.
                               M·∫∑c ƒë·ªãnh l√† 10.
    """
    console.print(f"\nüìä [bold green]{period_name_display}[/bold green]")

    if df_period_songs.empty:
        console.print("|   ü§∑ Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch cho giai ƒëo·∫°n n√†y.", style="yellow")
        return

    num_unique_songs = df_period_songs['fullSongName'].nunique()

    num_unique_artists = 0
    if ARTIST_NAME_COL in df_period_songs.columns and not df_period_songs[df_period_songs[ARTIST_NAME_COL].notna()][ARTIST_NAME_COL].empty:
        num_unique_artists = df_period_songs[df_period_songs[ARTIST_NAME_COL].notna()][ARTIST_NAME_COL].nunique()

    total_ms_played = df_period_songs[MS_PLAYED_COL].sum()
    total_time_str = format_ms_to_detailed_play_time_string(total_ms_played)

    console.print(f"| üëÄ [bold]Th·ªëng k√™: {num_unique_songs} b√†i h√°t - {num_unique_artists} ngh·ªá sƒ© - {total_time_str}[/bold]")

    console.print(f"| üîä [bold]B·∫£ng Top {top_n} B√†i H√°t v√† Ngh·ªá Sƒ© Nghe Nhi·ªÅu Nh·∫•t:[/bold]")

    top_songs = calculate_top_songs_data(df_period_songs, top_n=top_n)
    if not top_songs.empty:
        songs_table = Table(show_lines=False, header_style="blue")
        songs_table.add_column("STT", style="dim", width=3, justify="right")
        songs_table.add_column("T√™n b√†i h√°t", width=30)
        songs_table.add_column("Ngh·ªá sƒ©", width=20)
        songs_table.add_column("S·ªë l·∫ßn nghe", width=11, justify="right")
        songs_table.add_column("Th·ªùi gian nghe" , width=25, justify="right")

        for i, (full_song_name, row) in enumerate(top_songs.iterrows()):
            song_name_part = "Kh√¥ng r√µ"
            artist_name_part = "Kh√¥ng r√µ"

            if isinstance(full_song_name, str):
                parts = full_song_name.rsplit(" - ", 1)
                song_name_part = parts[0]
                if len(parts) > 1:
                    artist_name_part = parts[1]
                else:
                    artist_name_part = "Kh√¥ng x√°c ƒë·ªãnh"

            if len(song_name_part) > 30:
                song_name_for_display = song_name_part[:27] + "..."
            else:
                song_name_for_display = song_name_part

            play_count = row['S·ªë l·∫ßn nghe']
            time_played_str = format_ms_to_detailed_play_time_string(row['T·ªïng th·ªùi gian nghe (ms)'])
            songs_table.add_row(str(i+1), song_name_for_display, artist_name_part, str(play_count), time_played_str)
        console.print(songs_table)
    else:
        console.print("  ü§∑ Kh√¥ng c√≥ d·ªØ li·ªáu top b√†i h√°t cho giai ƒëo·∫°n n√†y.", style="yellow")

    top_artists = calculate_top_artists_data(df_period_songs, top_n=top_n)
    if not top_artists.empty:
        artists_table = Table(show_lines=False, header_style="blue")
        artists_table.add_column("STT", style="dim", width=3, justify="right")
        artists_table.add_column("Ngh·ªá sƒ©", width=53)
        artists_table.add_column("S·ªë l·∫ßn nghe",width=11, justify="right")
        artists_table.add_column("Th·ªùi gian nghe", width=25, justify="right")

        for i, (artist_name, row) in enumerate(top_artists.iterrows()):
            play_count = row['S·ªë l·∫ßn nghe']
            time_played_str = format_ms_to_detailed_play_time_string(row['T·ªïng th·ªùi gian nghe (ms)'])
            artists_table.add_row(str(i+1), str(artist_name), str(play_count), time_played_str)
        console.print(artists_table)
    else:
        console.print("| ü§∑ Kh√¥ng c√≥ d·ªØ li·ªáu top ngh·ªá sƒ© cho giai ƒëo·∫°n n√†y.", style="yellow")

def prepare_songs_df_for_excel(top_songs_df_calculated):
    """Chu·∫©n b·ªã DataFrame top b√†i h√°t cho vi·ªác xu·∫•t ra t·ªáp Excel.

    H√†m n√†y nh·∫≠n DataFrame k·∫øt qu·∫£ t·ª´ `calculate_top_songs_data`,
    t√°ch c·ªôt 'fullSongName' (index) th√†nh hai c·ªôt m·ªõi 'T√™n b√†i h√°t' v√† 'Ngh·ªá sƒ©'.
    ƒê·ªìng th·ªùi, ƒë·ªãnh d·∫°ng l·∫°i c·ªôt 'T·ªïng th·ªùi gian nghe (ms)' th√†nh chu·ªói th·ªùi gian d·ªÖ ƒë·ªçc.

    Args:
        top_songs_df_calculated (pd.DataFrame): DataFrame ch·ª©a top b√†i h√°t
                                                (th∆∞·ªùng l√† k·∫øt qu·∫£ t·ª´ `calculate_top_songs_data`).

    Returns:
        pd.DataFrame: DataFrame ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng v·ªõi c√°c c·ªôt:
                      'T√™n b√†i h√°t', 'Ngh·ªá sƒ©', 'S·ªë l·∫ßn nghe', 'Th·ªùi gian nghe'.
                      Tr·∫£ v·ªÅ DataFrame r·ªóng v·ªõi c√°c c·ªôt n√†y n·∫øu ƒë·∫ßu v√†o r·ªóng.
    """
    if top_songs_df_calculated.empty:
        return pd.DataFrame(columns=['T√™n b√†i h√°t', 'Ngh·ªá sƒ©', 'S·ªë l·∫ßn nghe', 'Th·ªùi gian nghe'])

    df_excel = top_songs_df_calculated.reset_index().rename(columns={'index': 'fullSongName'})

    split_names = df_excel['fullSongName'].astype(str).str.rsplit(' - ', n=1, expand=True)
    df_excel['T√™n b√†i h√°t'] = split_names[0]
    df_excel['Ngh·ªá sƒ©'] = split_names[1].fillna("Kh√¥ng x√°c ƒë·ªãnh") if 1 in split_names else "Kh√¥ng x√°c ƒë·ªãnh"

    df_excel['Th·ªùi gian nghe'] = df_excel['T·ªïng th·ªùi gian nghe (ms)'].apply(format_ms_to_detailed_play_time_string)

    return df_excel[['T√™n b√†i h√°t', 'Ngh·ªá sƒ©', 'S·ªë l·∫ßn nghe', 'Th·ªùi gian nghe']]

def prepare_artists_df_for_excel(top_artists_df_calculated):
    """Chu·∫©n b·ªã DataFrame top ngh·ªá sƒ© cho vi·ªác xu·∫•t ra t·ªáp Excel.

    H√†m n√†y nh·∫≠n DataFrame k·∫øt qu·∫£ t·ª´ `calculate_top_artists_data`,
    ƒë·ªïi t√™n c·ªôt `ARTIST_NAME_COL` (index) th√†nh 'Ngh·ªá sƒ©',
    ƒë·ªïi t√™n c·ªôt 'S·ªë l·∫ßn nghe' th√†nh 'S·ªë l·∫ßn nghe b√†i h√°t',
    v√† ƒë·ªãnh d·∫°ng l·∫°i c·ªôt 'T·ªïng th·ªùi gian nghe (ms)' th√†nh chu·ªói th·ªùi gian d·ªÖ ƒë·ªçc.

    Args:
        top_artists_df_calculated (pd.DataFrame): DataFrame ch·ª©a top ngh·ªá sƒ©
                                                  (th∆∞·ªùng l√† k·∫øt qu·∫£ t·ª´ `calculate_top_artists_data`).

    Returns:
        pd.DataFrame: DataFrame ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng v·ªõi c√°c c·ªôt:
                      'Ngh·ªá sƒ©', 'S·ªë l·∫ßn nghe b√†i h√°t', 'T·ªïng th·ªùi gian nghe'.
                      Tr·∫£ v·ªÅ DataFrame r·ªóng v·ªõi c√°c c·ªôt n√†y n·∫øu ƒë·∫ßu v√†o r·ªóng.
    """
    if top_artists_df_calculated.empty:
        return pd.DataFrame(columns=['Ngh·ªá sƒ©', 'S·ªë l·∫ßn nghe b√†i h√°t', 'T·ªïng th·ªùi gian nghe'])

    df_excel = top_artists_df_calculated.reset_index().rename(columns={'index': ARTIST_NAME_COL})
    df_excel['T·ªïng th·ªùi gian nghe'] = df_excel['T·ªïng th·ªùi gian nghe (ms)'].apply(format_ms_to_detailed_play_time_string)

    return df_excel.rename(columns={
        ARTIST_NAME_COL: 'Ngh·ªá sƒ©',
        'S·ªë l·∫ßn nghe': 'S·ªë l·∫ßn nghe b√†i h√°t'
    })[['Ngh·ªá sƒ©', 'S·ªë l·∫ßn nghe b√†i h√°t', 'T·ªïng th·ªùi gian nghe']]

all_songs_df_base = pd.DataFrame()

def export_to_excel(yearly_data_dict, filename="spotify_analysis_report.xlsx", top_n_excel=20):
    """Xu·∫•t d·ªØ li·ªáu ph√¢n t√≠ch Spotify ra t·ªáp Excel.

    T·∫°o m·ªôt t·ªáp Excel v·ªõi nhi·ªÅu sheet:
    - M·ªôt sheet "T·∫•t c·∫£": Ch·ª©a top `top_n_excel` b√†i h√°t v√† ngh·ªá sƒ© t·ª´ to√†n b·ªô d·ªØ li·ªáu.
      D·ªØ li·ªáu n√†y ƒë∆∞·ª£c l·∫•y t·ª´ bi·∫øn global `all_songs_df_base`.
    - M·ªói nƒÉm c√≥ d·ªØ li·ªáu trong `yearly_data_dict`: M·ªôt sheet ri√™ng (v√≠ d·ª•: "2023")
      ch·ª©a top `top_n_excel` b√†i h√°t v√† ngh·ªá sƒ© c·ªßa nƒÉm ƒë√≥.

    H√†m s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c√°c c·ªôt trong Excel ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n.
    Y√™u c·∫ßu th∆∞ vi·ªán `openpyxl` ph·∫£i ƒë∆∞·ª£c c√†i ƒë·∫∑t.

    Args:
        yearly_data_dict (dict): Dictionary trong ƒë√≥ key l√† nƒÉm (int ho·∫∑c str) v√† value l√†
                                 DataFrame ch·ª©a d·ªØ li·ªáu b√†i h√°t c·ªßa nƒÉm ƒë√≥.
        filename (str, optional): T√™n c·ªßa t·ªáp Excel ƒë·∫ßu ra.
                                  M·∫∑c ƒë·ªãnh l√† "spotify_analysis_report.xlsx".
        top_n_excel (int, optional): S·ªë l∆∞·ª£ng m·ª•c (b√†i h√°t/ngh·ªá sƒ©) h√†ng ƒë·∫ßu
                                     ƒë·ªÉ xu·∫•t ra m·ªói sheet Excel. M·∫∑c ƒë·ªãnh l√† 20.
    """
    global all_songs_df_base
    console.print(f"\nüìö [bold green]Xu·∫•t ra EXCEL[/bold green]")
    try:
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            start_row_artists = 1
            if not all_songs_df_base.empty:
                all_songs_excel_data = calculate_top_songs_data(all_songs_df_base, top_n=top_n_excel)
                if not all_songs_excel_data.empty:
                    excel_all_songs = prepare_songs_df_for_excel(all_songs_excel_data)
                    excel_all_songs.to_excel(writer, sheet_name="T·∫•t c·∫£", index=False, startrow=1)
                    worksheet = writer.sheets["T·∫•t c·∫£"]
                    worksheet.cell(row=1, column=1, value=f"Top {top_n_excel} B√†i H√°t (T·∫•t c·∫£)")
                    start_row_artists = len(excel_all_songs) + 4
                    worksheet.cell(row=start_row_artists -1 , column=1, value=f"Top {top_n_excel} Ngh·ªá Sƒ© (T·∫•t c·∫£)")

                all_artists_excel_data = calculate_top_artists_data(all_songs_df_base, top_n=top_n_excel)
                if not all_artists_excel_data.empty:
                    excel_all_artists = prepare_artists_df_for_excel(all_artists_excel_data)
                    excel_all_artists.to_excel(writer, sheet_name="T·∫•t c·∫£", index=False, startrow=start_row_artists)
                    if start_row_artists == 1:
                        worksheet = writer.sheets["T·∫•t c·∫£"]
                        worksheet.cell(row=1, column=1, value=f"Top {top_n_excel} Ngh·ªá Sƒ© (T·∫•t c·∫£)")

            for year, df_year_songs in yearly_data_dict.items():
                if df_year_songs.empty:
                    continue
                sheet_name = str(year)
                start_row_artists_year = 1

                year_top_songs_data = calculate_top_songs_data(df_year_songs, top_n=top_n_excel)
                if not year_top_songs_data.empty:
                    excel_year_songs = prepare_songs_df_for_excel(year_top_songs_data)
                    excel_year_songs.to_excel(writer, sheet_name=sheet_name, index=False, startrow=1)
                    worksheet = writer.sheets[sheet_name]
                    worksheet.cell(row=1, column=1, value=f"Top {top_n_excel} B√†i H√°t (NƒÉm {year})")
                    start_row_artists_year = len(excel_year_songs) + 4
                    worksheet.cell(row=start_row_artists_year -1 , column=1, value=f"Top {top_n_excel} Ngh·ªá Sƒ© (NƒÉm {year})")

                year_top_artists_data = calculate_top_artists_data(df_year_songs, top_n=top_n_excel)
                if not year_top_artists_data.empty:
                    excel_year_artists = prepare_artists_df_for_excel(year_top_artists_data)
                    excel_year_artists.to_excel(writer, sheet_name=sheet_name, index=False, startrow=start_row_artists_year)
                    if start_row_artists_year == 1:
                        worksheet = writer.sheets[sheet_name]
                        worksheet.cell(row=1, column=1, value=f"Top {top_n_excel} Ngh·ªá Sƒ© (NƒÉm {year})")

            for sheet_name_iter in writer.sheets:
                worksheet = writer.sheets[sheet_name_iter]
                for column_cells in worksheet.columns:
                    max_length = 0
                    column_letter = column_cells[0].column_letter
                    for cell in column_cells:
                        try:
                            if cell.value is not None:
                                max_length = max(max_length, len(str(cell.value)))
                        except:
                            pass
                    adjusted_width = min(max(max_length + 2, 10), 50)
                    worksheet.column_dimensions[column_letter].width = adjusted_width

        console.print(f"| ‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c xu·∫•t th√†nh c√¥ng v√†o '[cyan]{filename}[/cyan]'")
    except ImportError:
        console.print("| ‚ùå L·ªói: Th∆∞ vi·ªán 'openpyxl' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. H√£y ch·∫°y: pip install openpyxl", style="red")
    except Exception as e:
        console.print(f"| ‚ùå L·ªói khi xu·∫•t file Excel: {e}", style="red")


def main():
    """H√†m ch√≠nh ƒëi·ªÅu khi·ªÉn lu·ªìng th·ª±c thi c·ªßa ch∆∞∆°ng tr√¨nh ph√¢n t√≠ch l·ªãch s·ª≠ nghe nh·∫°c Spotify.

    C√°c b∆∞·ªõc ch√≠nh bao g·ªìm:
    1. T·∫£i d·ªØ li·ªáu t·ª´ t·ªáp ZIP ch·ª©a l·ªãch s·ª≠ nghe nh·∫°c Spotify.
    2. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ chu·∫©n h√≥a v√† l·ªçc ra c√°c b·∫£n nh·∫°c h·ª£p l·ªá.
    3. L∆∞u tr·ªØ b·∫£n sao c·ªßa DataFrame b√†i h√°t ƒë√£ x·ª≠ l√Ω v√†o bi·∫øn global `all_songs_df_base`.
    4. T·∫°o menu cho ph√©p ng∆∞·ªùi d√πng ch·ªçn xem ph√¢n t√≠ch cho "T·∫•t c·∫£ th·ªùi gian" ho·∫∑c m·ªôt nƒÉm c·ª• th·ªÉ.
    5. D·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng, th·ª±c hi·ªán ph√¢n t√≠ch v√† hi·ªÉn th·ªã k·∫øt qu·∫£
       (th·ªëng k√™ chung, top b√†i h√°t, top ngh·ªá sƒ©) l√™n console.
    6. Chu·∫©n b·ªã d·ªØ li·ªáu theo nƒÉm v√† xu·∫•t to√†n b·ªô b√°o c√°o ph√¢n t√≠ch ra t·ªáp Excel.
    """
    global all_songs_df_base

    console.print("üöÄ [bold green]B·∫Øt ƒë·∫ßu ph√¢n t√≠ch l·ªãch s·ª≠ SPOTIFY[/bold green]")

    df_raw = load_streaming_data_from_zip(ZIP_FILE_PATH, internal_file_pattern=INTERNAL_JSON_PATTERN)

    if df_raw.empty:
        console.print("| üèÅ K·∫øt th√∫c: kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ file ZIP.", style="yellow")
        return

    df_songs = preprocess_data(df_raw)
    if df_songs.empty:
        console.print(f"\n| üèÅ K·∫øt th√∫c: kh√¥ng c√≥ b√†i h√°t h·ª£p l·ªá n√†o sau ti·ªÅn x·ª≠ l√Ω.", style="yellow")
        return

    all_songs_df_base = df_songs.copy()

    available_years = sorted(df_songs['year'].unique(), reverse=True)

    menu_display_items = ["üåç 0. T·∫•t c·∫£"]
    numeric_choice_to_data_key = {0: "T·∫•t c·∫£"}

    for i, year in enumerate(available_years):
        menu_display_items.append(f"üìÖ {i+1}. NƒÉm {year}")
        numeric_choice_to_data_key[i+1] = year

    console.print("\nüíê [bold green]MENU l·ª±a chon xem[/bold green]")
    console.print("| " + " | ".join(menu_display_items))

    final_prompt_text = "| L·ª±a ch·ªçn c·ªßa b·∫°n: "
    choice_str = console.input(f"{final_prompt_text}").strip()

    df_to_analyze = pd.DataFrame()
    period_name_display = ""

    if choice_str.isdigit():
        choice_num = int(choice_str)
        if choice_num in numeric_choice_to_data_key:
            selected_option = numeric_choice_to_data_key[choice_num]
            if selected_option == "T·∫•t c·∫£":
                df_to_analyze = df_songs
                period_name_display = "T·∫•t C·∫£ Th·ªùi Gian"
            else:
                selected_year = selected_option
                df_to_analyze = df_songs[df_songs['year'] == selected_year]
                period_name_display = f"NƒÇM {selected_year}"

            display_analysis_results(df_to_analyze, period_name_display, top_n=10)
        else:
            console.print("| ‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá (s·ªë kh√¥ng c√≥ trong menu). Exit", style="red")
            return
    else:
        console.print("| ‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i l√† s·ªë).Exit", style="red")
        return

    yearly_data_dict_for_export = {}
    if not df_songs.empty:
        for year_val in available_years:
            yearly_data_dict_for_export[year_val] = df_songs[df_songs['year'] == year_val]

    if not df_songs.empty:
        export_to_excel(yearly_data_dict_for_export, top_n_excel=20)
    else:
        console.print("| ü§∑ Kh√¥ng c√≥ d·ªØ li·ªáu b√†i h√°t ƒë·ªÉ xu·∫•t ra Excel.", style="yellow")

if __name__ == "__main__":
    main()